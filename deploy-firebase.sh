#!/bin/bash

# Firebase Deployment Script - Tannp's Custom Version
# Script n√†y deploy ·ª©ng d·ª•ng l√™n Firebase Hosting
# Author: tannp
# Created: $(date +%Y-%m-%d)

set -e  # Tho√°t ngay khi c√≥ l·ªói

# C·∫•u h√¨nh d·ª± √°n
PROJECT_NAME="web-performance-project1-initial"
FIREBASE_PROJECT_ID="jenkins-ws2-b6b91"  # Firebase project ID
BUILD_DIR="dist"  # Th∆∞ m·ª•c ch·ª©a files ƒë·ªÉ deploy
FIREBASE_TOKEN="${FIREBASE_TOKEN:-}"  # Firebase authentication token

# M√†u s·∫Øc cho output ƒë·∫πp m·∫Øt
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# C√°c h√†m logging
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} üìã $1"
}

error() {
    echo -e "${RED}[L·ªñI]${NC} ‚ùå $1" >&2
}

success() {
    echo -e "${GREEN}[TH√ÄNH C√îNG]${NC} ‚úÖ $1"
}

warning() {
    echo -e "${YELLOW}[C·∫¢NH B√ÅO]${NC} ‚ö†Ô∏è $1"
}

info() {
    echo -e "${PURPLE}[INFO]${NC} ‚ÑπÔ∏è $1"
}

# Thi·∫øt l·∫≠p x√°c th·ª±c Firebase
setup_credentials() {
    log "ƒêang thi·∫øt l·∫≠p x√°c th·ª±c Firebase..."
    
    if [[ -z "$FIREBASE_TOKEN" ]]; then
        error "Kh√¥ng t√¨m th·∫•y Firebase token!"
        error "Vui l√≤ng set bi·∫øn FIREBASE_TOKEN"
        info "L·∫•y token b·∫±ng l·ªánh: firebase login:ci"
        exit 1
    fi
    
    info "S·ª≠ d·ª•ng Firebase token ƒë·ªÉ x√°c th·ª±c"
    success "Firebase token ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# Ki·ªÉm tra c√°c y√™u c·∫ßu c·∫ßn thi·∫øt
check_prerequisites() {
    log "Ki·ªÉm tra c√°c y√™u c·∫ßu c·∫ßn thi·∫øt..."
    
    # Ki·ªÉm tra Firebase CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
    if ! command -v firebase &> /dev/null; then
        error "Firebase CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        info "C√†i ƒë·∫∑t v·ªõi l·ªánh: npm install -g firebase-tools"
        exit 1
    fi
    
    info "Firebase CLI version: $(firebase --version)"
    success "Ki·ªÉm tra y√™u c·∫ßu ho√†n t·∫•t"
}

# Chu·∫©n b·ªã th∆∞ m·ª•c build
prepare_build() {
    log "Chu·∫©n b·ªã th∆∞ m·ª•c build..."

    # X√≥a th∆∞ m·ª•c build c≈© n·∫øu c√≥
    if [[ -d "$BUILD_DIR" ]]; then
        warning "X√≥a th∆∞ m·ª•c build c≈©: $BUILD_DIR"
        rm -rf "$BUILD_DIR"
    fi

    # T·∫°o th∆∞ m·ª•c build m·ªõi
    mkdir -p "$BUILD_DIR"
    info "ƒê√£ t·∫°o th∆∞ m·ª•c: $BUILD_DIR"

    # Copy c√°c file c·∫ßn thi·∫øt ƒë·ªÉ deploy
    ESSENTIAL_FILES=(
        "index.html"
        "404.html"
        "css"
        "js"
        "images"
        "eslint.config.js"
        "package.json"
    )

    log "ƒêang copy c√°c file c·∫ßn thi·∫øt..."
    for item in "${ESSENTIAL_FILES[@]}"; do
        if [[ -e "$item" ]]; then
            info "‚úì Copy $item v√†o build directory"
            cp -r "$item" "$BUILD_DIR/"
        else
            warning "Kh√¥ng t√¨m th·∫•y $item, b·ªè qua..."
        fi
    done

    success "Th∆∞ m·ª•c build ƒë√£ s·∫µn s√†ng"
}


# Deploy to Firebase
deploy_to_firebase() {
    log "Deploying to Firebase Hosting..."

    # Verify Firebase configuration
    log "Verifying Firebase configuration..."
    if [[ ! -f "firebase.json" ]]; then
        error "firebase.json not found"
        error "Run 'firebase init' to initialize Firebase configuration"
        exit 1
    fi

    # Verify authentication using Firebase token
    log "Verifying Firebase authentication..."
    log "Using Firebase token authentication"

    # Test Firebase authentication with projects list
    if ! firebase projects:list --token="$FIREBASE_TOKEN" >/dev/null 2>&1; then
        error "Firebase authentication failed"
        error "Invalid or expired Firebase token"
        error "Project ID: $FIREBASE_PROJECT_ID"
        error "Generate a new token with: firebase login:ci"
        exit 1
    fi

    log "Firebase authentication successful"

    # Deploy to Firebase using token
    log "Starting Firebase deployment..."
    info "Deploying t·ª´ th∆∞ m·ª•c: $BUILD_DIR"
    info "Firebase Project: $FIREBASE_PROJECT_ID"
    NODE_OPTIONS="--max-old-space-size=4096" firebase deploy --only hosting --project="$FIREBASE_PROJECT_ID" --token="$FIREBASE_TOKEN" --non-interactive

    success "Deployment to Firebase completed"
}

# Get deployment URL
get_deployment_url() {
    log "Getting deployment information..."

    local hosting_url="https://${FIREBASE_PROJECT_ID}.web.app"
    local custom_domain_url="https://${FIREBASE_PROJECT_ID}.firebaseapp.com"

    echo ""
    echo "üöÄ Deployment ho√†n th√†nh th√†nh c√¥ng!"
    echo ""
    echo "üì± ·ª®ng d·ª•ng c·ªßa b·∫°n ƒë√£ live t·∫°i:"
    echo "   URL ch√≠nh: $hosting_url"
    echo "   URL ph·ª•: $custom_domain_url"
    echo ""
    echo "üîß Th√¥ng tin d·ª± √°n:"
    echo "   Project ID: $FIREBASE_PROJECT_ID"
    echo "   Th∆∞ m·ª•c build: $BUILD_DIR"
    echo "   Th·ªùi gian deploy: $(date '+%d/%m/%Y %H:%M:%S')"
    echo "   Deployed by: tannp üéØ"
}

# Cleanup build directory
cleanup() {
    # Clean up build directory
    if [[ "$1" == "--keep-build" ]]; then
        log "Keeping build directory as requested"
    else
        log "Cleaning up build directory..."
        rm -rf "$BUILD_DIR"
        success "Cleanup completed"
    fi
}

# Show usage information
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --keep-build    Keep the build directory after deployment"
    echo "  --help         Show this help message"
    echo ""
    echo "Environment Variables:"
    echo "  FIREBASE_TOKEN      Firebase authentication token (required)"
    echo ""
    echo "Examples:"
    echo "  # Get Firebase token:"
    echo "  firebase login:ci"
    echo ""
    echo "  # Use token for deployment:"
    echo "  export FIREBASE_TOKEN='your-firebase-token-here'"
    echo "  $0"
}

# Main deployment process
main() {
    local keep_build=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --keep-build)
                keep_build=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done

    log "B·∫Øt ƒë·∫ßu Firebase deployment cho $PROJECT_NAME..."
    info "T√°c gi·∫£: tannp | $(date '+%d/%m/%Y %H:%M:%S')"

    # Ch·∫°y c√°c b∆∞·ªõc deployment
    check_prerequisites
    setup_credentials
    prepare_build
    deploy_to_firebase
    get_deployment_url

    # D·ªçn d·∫πp
    if [[ "$keep_build" == true ]]; then
        cleanup --keep-build
    else
        cleanup
    fi

    success "üéâ Firebase deployment ho√†n th√†nh! Ch√∫c m·ª´ng! üéä"
}

# Handle script interruption
trap 'error "Deployment interrupted"; cleanup; exit 1' INT TERM

# Run main function with all arguments
main "$@"